import golosinas.*
import mariano.*

describe "tests de mariano" {

	fixture {
		chocolatin.pesoInicial(100)
		mariano.comprar(chocolatin)
		mariano.comprar(caramelo)
		mariano.comprar(bombon)
	}

	test "test comprar" {
		assert.equals(3, mariano.golosinas().size())
		assert.that(mariano.golosinas().contains(chocolatin))
		assert.that(mariano.golosinas().contains(caramelo))
		assert.that(mariano.golosinas().contains(bombon))
		assert.notThat(mariano.golosinas().contains(chupetin))
	}
	
	test "probar golosinas" {
		/* habilitar las lineas anuladas cuando se complete la definicion 
		 * de las golosinas
		 */
		assert.equals(100, chocolatin.peso())
		assert.equals(5, caramelo.peso())
		assert.equals(15, bombon.peso())
		mariano.probarGolosinas()
		assert.equals(98, chocolatin.peso())
		assert.equals(4, caramelo.peso())
		assert.equals(11, bombon.peso())
	}
	
	test "Sin TACC"{
		assert.that(mariano.hayGolosinasSinTACC())
	}
	
	test "Precios Cuidados"{
		assert.notThat(mariano.preciosCuidados())
	}
	
	test "Golosina de sabor x (depende)"{
		mariano.desechar(caramelo)
		assert.equals(chocolatin,mariano.golosinaDeSabor("chocolate"))
		assert.equals(bombon,mariano.golosinaDeSabor("frutilla"))
		//assert.equals(bombon,mariano.golosinaDeSabor("frutilla")) porque golosinaDeSabor retorna la primer golosina que encuentra 
	}
	
	test "GolosinaS de sabor x"{
		assert.equals(#{bombon,caramelo}, mariano.golosinasDeSabor("frutilla"))
	}
	
	test "Sabores"{
		assert.equals(#{"chocolate","frutilla"},mariano.sabores())
	}
	
	test "La golosina mas cara (el precio de chocolatin depende del peso)"{
		assert.equals(chocolatin,mariano.golosinaMasCara())
	}
	
	test "Peso del total de las golosinas compradas"{
		assert.equals(120,mariano.pesoGolosinas())
	}
	
	test "golosinas que desea pero no compro"{
		assert.equals(#{chupetin},mariano.golosinasFaltantes())
	}
	
	test "gustos que desea pero no compro"{
		assert.equals(#{},mariano.gustosFaltantes())
	}
}

